
0_led_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004f8  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006a0  080006a0  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006a0  080006a0  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080006a0  080006a0  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006a0  080006a0  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006a0  080006a0  000106a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006a4  080006a4  000106a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080006a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000030  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000094  20000094  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   000007c6  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003b2  00000000  00000000  0002085a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b8  00000000  00000000  00020c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000080  00000000  00000000  00020cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000185ae  00000000  00000000  00020d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000010ec  00000000  00000000  000392f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a2a5  00000000  00000000  0003a3e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000c4687  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003a0  00000000  00000000  000c46d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000064 	.word	0x20000064
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000688 	.word	0x08000688

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000068 	.word	0x20000068
 80001e4:	08000688 	.word	0x08000688

080001e8 <configure_mode>:

/*
 * Set up the led pin as output
 */
void configure_mode(const LED_Typedef* led)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
//	Configure the led pin of port D for output by setting bits of GPIOD Moder registers to 01
	GPIOD->MODER &= ~led->MODER_1;
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	685b      	ldr	r3, [r3, #4]
 80001f4:	43da      	mvns	r2, r3
 80001f6:	4b09      	ldr	r3, [pc, #36]	; (800021c <configure_mode+0x34>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4908      	ldr	r1, [pc, #32]	; (800021c <configure_mode+0x34>)
 80001fc:	4013      	ands	r3, r2
 80001fe:	600b      	str	r3, [r1, #0]
	GPIOD->MODER |= led->MODER_2;
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	689a      	ldr	r2, [r3, #8]
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <configure_mode+0x34>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4904      	ldr	r1, [pc, #16]	; (800021c <configure_mode+0x34>)
 800020a:	4313      	orrs	r3, r2
 800020c:	600b      	str	r3, [r1, #0]
}
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	40020c00 	.word	0x40020c00

08000220 <led_init>:

/*
 * Configure led pin and mode for output
*/
LED_Typedef* led_init(LED led)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	71fb      	strb	r3, [r7, #7]
//	Enable clock access to port D setting bit 3 of RCC_AHB1ENR register
	RCC->AHB1ENR |= GPIOD_EN;
 800022a:	4b2d      	ldr	r3, [pc, #180]	; (80002e0 <led_init+0xc0>)
 800022c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800022e:	4a2c      	ldr	r2, [pc, #176]	; (80002e0 <led_init+0xc0>)
 8000230:	f043 0308 	orr.w	r3, r3, #8
 8000234:	6313      	str	r3, [r2, #48]	; 0x30

	LED_Typedef* led_config = malloc(sizeof(led_config));;
 8000236:	2004      	movs	r0, #4
 8000238:	f000 f96c 	bl	8000514 <malloc>
 800023c:	4603      	mov	r3, r0
 800023e:	60fb      	str	r3, [r7, #12]

	if(led == LED_3){
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	2b00      	cmp	r3, #0
 8000244:	d10f      	bne.n	8000266 <led_init+0x46>
		led_config->PIN = LED_3_PIN;
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800024c:	601a      	str	r2, [r3, #0]
		led_config->MODER_1 = LED_3_MODER_1;
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000254:	605a      	str	r2, [r3, #4]
		led_config->MODER_2 = LED_3_MODER_2;
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800025c:	609a      	str	r2, [r3, #8]
		configure_mode(led_config);
 800025e:	68f8      	ldr	r0, [r7, #12]
 8000260:	f7ff ffc2 	bl	80001e8 <configure_mode>
 8000264:	e037      	b.n	80002d6 <led_init+0xb6>
	}
	else if(led == LED_4){
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	2b01      	cmp	r3, #1
 800026a:	d10f      	bne.n	800028c <led_init+0x6c>
		led_config->PIN = LED_4_PIN;
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000272:	601a      	str	r2, [r3, #0]
		led_config->MODER_1 = LED_4_MODER_1;
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800027a:	605a      	str	r2, [r3, #4]
		led_config->MODER_2 = LED_4_MODER_2;
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000282:	609a      	str	r2, [r3, #8]
		configure_mode(led_config);
 8000284:	68f8      	ldr	r0, [r7, #12]
 8000286:	f7ff ffaf 	bl	80001e8 <configure_mode>
 800028a:	e024      	b.n	80002d6 <led_init+0xb6>
	}
	else if(led == LED_5){
 800028c:	79fb      	ldrb	r3, [r7, #7]
 800028e:	2b02      	cmp	r3, #2
 8000290:	d10f      	bne.n	80002b2 <led_init+0x92>
		led_config->PIN = LED_5_PIN;
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000298:	601a      	str	r2, [r3, #0]
		led_config->MODER_1 = LED_5_MODER_1;
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80002a0:	605a      	str	r2, [r3, #4]
		led_config->MODER_2 = LED_5_MODER_2;
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80002a8:	609a      	str	r2, [r3, #8]
		configure_mode(led_config);
 80002aa:	68f8      	ldr	r0, [r7, #12]
 80002ac:	f7ff ff9c 	bl	80001e8 <configure_mode>
 80002b0:	e011      	b.n	80002d6 <led_init+0xb6>
	}
	else if(led == LED_6){
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	2b03      	cmp	r3, #3
 80002b6:	d10e      	bne.n	80002d6 <led_init+0xb6>
		led_config->PIN = LED_6_PIN;
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80002be:	601a      	str	r2, [r3, #0]
		led_config->MODER_1 = LED_6_MODER_1;
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80002c6:	605a      	str	r2, [r3, #4]
		led_config->MODER_2 = LED_6_MODER_2;
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ce:	609a      	str	r2, [r3, #8]
		configure_mode(led_config);
 80002d0:	68f8      	ldr	r0, [r7, #12]
 80002d2:	f7ff ff89 	bl	80001e8 <configure_mode>
	}

	return led_config;
 80002d6:	68fb      	ldr	r3, [r7, #12]
}
 80002d8:	4618      	mov	r0, r3
 80002da:	3710      	adds	r7, #16
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	40023800 	.word	0x40023800

080002e4 <led_on>:
/*
 * Turn LED on by setting PD13 to true
*/

void led_on(LED_Typedef* led)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
// 	Turn on led by setting led pin of GPIOD ODR(output data register) to true
	GPIOD->ODR |= led->PIN;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	681a      	ldr	r2, [r3, #0]
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <led_on+0x24>)
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	4904      	ldr	r1, [pc, #16]	; (8000308 <led_on+0x24>)
 80002f6:	4313      	orrs	r3, r2
 80002f8:	614b      	str	r3, [r1, #20]
}
 80002fa:	bf00      	nop
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	40020c00 	.word	0x40020c00

0800030c <led_off>:
/*
 * Turn LED off by setting PD13 to false
*/

void led_off(LED_Typedef* led)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
	// 	Turn off led by setting led pin of GPIOD ODR(output data register) to false
		GPIOD->ODR &= ~led->PIN;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	43da      	mvns	r2, r3
 800031a:	4b05      	ldr	r3, [pc, #20]	; (8000330 <led_off+0x24>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	4904      	ldr	r1, [pc, #16]	; (8000330 <led_off+0x24>)
 8000320:	4013      	ands	r3, r2
 8000322:	614b      	str	r3, [r1, #20]
}
 8000324:	bf00      	nop
 8000326:	370c      	adds	r7, #12
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr
 8000330:	40020c00 	.word	0x40020c00

08000334 <delay>:
#include "led.h"

void delay(uint32_t val)
{
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < val; i++)
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	e002      	b.n	8000348 <delay+0x14>
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	3301      	adds	r3, #1
 8000346:	60fb      	str	r3, [r7, #12]
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	687a      	ldr	r2, [r7, #4]
 800034c:	429a      	cmp	r2, r3
 800034e:	d8f8      	bhi.n	8000342 <delay+0xe>
	{

	}
}
 8000350:	bf00      	nop
 8000352:	bf00      	nop
 8000354:	3714      	adds	r7, #20
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
	...

08000360 <short_delay>:

void short_delay()
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	delay(1000000);
 8000364:	4802      	ldr	r0, [pc, #8]	; (8000370 <short_delay+0x10>)
 8000366:	f7ff ffe5 	bl	8000334 <delay>
}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	000f4240 	.word	0x000f4240

08000374 <long_delay>:

void long_delay()
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
	delay(5000000);
 8000378:	4802      	ldr	r0, [pc, #8]	; (8000384 <long_delay+0x10>)
 800037a:	f7ff ffdb 	bl	8000334 <delay>
}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	004c4b40 	.word	0x004c4b40

08000388 <main>:

int main(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
	LED_Typedef* orange = led_init(LED_3);
 800038e:	2000      	movs	r0, #0
 8000390:	f7ff ff46 	bl	8000220 <led_init>
 8000394:	60f8      	str	r0, [r7, #12]
	LED_Typedef* green = led_init(LED_4);
 8000396:	2001      	movs	r0, #1
 8000398:	f7ff ff42 	bl	8000220 <led_init>
 800039c:	60b8      	str	r0, [r7, #8]
	LED_Typedef* red = led_init(LED_5);
 800039e:	2002      	movs	r0, #2
 80003a0:	f7ff ff3e 	bl	8000220 <led_init>
 80003a4:	6078      	str	r0, [r7, #4]
	LED_Typedef* blue = led_init(LED_6);
 80003a6:	2003      	movs	r0, #3
 80003a8:	f7ff ff3a 	bl	8000220 <led_init>
 80003ac:	6038      	str	r0, [r7, #0]

	while(1)
	{
		led_on(orange);
 80003ae:	68f8      	ldr	r0, [r7, #12]
 80003b0:	f7ff ff98 	bl	80002e4 <led_on>
		short_delay();
 80003b4:	f7ff ffd4 	bl	8000360 <short_delay>
		led_on(green);
 80003b8:	68b8      	ldr	r0, [r7, #8]
 80003ba:	f7ff ff93 	bl	80002e4 <led_on>
		short_delay();
 80003be:	f7ff ffcf 	bl	8000360 <short_delay>
		led_on(red);
 80003c2:	6878      	ldr	r0, [r7, #4]
 80003c4:	f7ff ff8e 	bl	80002e4 <led_on>
		short_delay();
 80003c8:	f7ff ffca 	bl	8000360 <short_delay>
		led_on(blue);
 80003cc:	6838      	ldr	r0, [r7, #0]
 80003ce:	f7ff ff89 	bl	80002e4 <led_on>

		long_delay();
 80003d2:	f7ff ffcf 	bl	8000374 <long_delay>

		led_off(orange);
 80003d6:	68f8      	ldr	r0, [r7, #12]
 80003d8:	f7ff ff98 	bl	800030c <led_off>
		short_delay();
 80003dc:	f7ff ffc0 	bl	8000360 <short_delay>
		led_off(green);
 80003e0:	68b8      	ldr	r0, [r7, #8]
 80003e2:	f7ff ff93 	bl	800030c <led_off>
		short_delay();
 80003e6:	f7ff ffbb 	bl	8000360 <short_delay>
		led_off(red);
 80003ea:	6878      	ldr	r0, [r7, #4]
 80003ec:	f7ff ff8e 	bl	800030c <led_off>
		short_delay();
 80003f0:	f7ff ffb6 	bl	8000360 <short_delay>
		led_off(blue);
 80003f4:	6838      	ldr	r0, [r7, #0]
 80003f6:	f7ff ff89 	bl	800030c <led_off>
		short_delay();
 80003fa:	f7ff ffb1 	bl	8000360 <short_delay>
		led_on(orange);
 80003fe:	e7d6      	b.n	80003ae <main+0x26>

08000400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b086      	sub	sp, #24
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000408:	4a14      	ldr	r2, [pc, #80]	; (800045c <_sbrk+0x5c>)
 800040a:	4b15      	ldr	r3, [pc, #84]	; (8000460 <_sbrk+0x60>)
 800040c:	1ad3      	subs	r3, r2, r3
 800040e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000410:	697b      	ldr	r3, [r7, #20]
 8000412:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000414:	4b13      	ldr	r3, [pc, #76]	; (8000464 <_sbrk+0x64>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d102      	bne.n	8000422 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800041c:	4b11      	ldr	r3, [pc, #68]	; (8000464 <_sbrk+0x64>)
 800041e:	4a12      	ldr	r2, [pc, #72]	; (8000468 <_sbrk+0x68>)
 8000420:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000422:	4b10      	ldr	r3, [pc, #64]	; (8000464 <_sbrk+0x64>)
 8000424:	681a      	ldr	r2, [r3, #0]
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4413      	add	r3, r2
 800042a:	693a      	ldr	r2, [r7, #16]
 800042c:	429a      	cmp	r2, r3
 800042e:	d207      	bcs.n	8000440 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000430:	f000 f846 	bl	80004c0 <__errno>
 8000434:	4603      	mov	r3, r0
 8000436:	220c      	movs	r2, #12
 8000438:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800043a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800043e:	e009      	b.n	8000454 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000440:	4b08      	ldr	r3, [pc, #32]	; (8000464 <_sbrk+0x64>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000446:	4b07      	ldr	r3, [pc, #28]	; (8000464 <_sbrk+0x64>)
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4413      	add	r3, r2
 800044e:	4a05      	ldr	r2, [pc, #20]	; (8000464 <_sbrk+0x64>)
 8000450:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000452:	68fb      	ldr	r3, [r7, #12]
}
 8000454:	4618      	mov	r0, r3
 8000456:	3718      	adds	r7, #24
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	20020000 	.word	0x20020000
 8000460:	00000400 	.word	0x00000400
 8000464:	20000080 	.word	0x20000080
 8000468:	20000098 	.word	0x20000098

0800046c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800046c:	480d      	ldr	r0, [pc, #52]	; (80004a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800046e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000470:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000474:	480c      	ldr	r0, [pc, #48]	; (80004a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000476:	490d      	ldr	r1, [pc, #52]	; (80004ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000478:	4a0d      	ldr	r2, [pc, #52]	; (80004b0 <LoopForever+0xe>)
  movs r3, #0
 800047a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800047c:	e002      	b.n	8000484 <LoopCopyDataInit>

0800047e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800047e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000482:	3304      	adds	r3, #4

08000484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000488:	d3f9      	bcc.n	800047e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800048a:	4a0a      	ldr	r2, [pc, #40]	; (80004b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800048c:	4c0a      	ldr	r4, [pc, #40]	; (80004b8 <LoopForever+0x16>)
  movs r3, #0
 800048e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000490:	e001      	b.n	8000496 <LoopFillZerobss>

08000492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000494:	3204      	adds	r2, #4

08000496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000498:	d3fb      	bcc.n	8000492 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800049a:	f000 f817 	bl	80004cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800049e:	f7ff ff73 	bl	8000388 <main>

080004a2 <LoopForever>:

LoopForever:
    b LoopForever
 80004a2:	e7fe      	b.n	80004a2 <LoopForever>
  ldr   r0, =_estack
 80004a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004ac:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80004b0:	080006a8 	.word	0x080006a8
  ldr r2, =_sbss
 80004b4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80004b8:	20000094 	.word	0x20000094

080004bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004bc:	e7fe      	b.n	80004bc <ADC_IRQHandler>
	...

080004c0 <__errno>:
 80004c0:	4b01      	ldr	r3, [pc, #4]	; (80004c8 <__errno+0x8>)
 80004c2:	6818      	ldr	r0, [r3, #0]
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	20000000 	.word	0x20000000

080004cc <__libc_init_array>:
 80004cc:	b570      	push	{r4, r5, r6, lr}
 80004ce:	4d0d      	ldr	r5, [pc, #52]	; (8000504 <__libc_init_array+0x38>)
 80004d0:	4c0d      	ldr	r4, [pc, #52]	; (8000508 <__libc_init_array+0x3c>)
 80004d2:	1b64      	subs	r4, r4, r5
 80004d4:	10a4      	asrs	r4, r4, #2
 80004d6:	2600      	movs	r6, #0
 80004d8:	42a6      	cmp	r6, r4
 80004da:	d109      	bne.n	80004f0 <__libc_init_array+0x24>
 80004dc:	4d0b      	ldr	r5, [pc, #44]	; (800050c <__libc_init_array+0x40>)
 80004de:	4c0c      	ldr	r4, [pc, #48]	; (8000510 <__libc_init_array+0x44>)
 80004e0:	f000 f8d2 	bl	8000688 <_init>
 80004e4:	1b64      	subs	r4, r4, r5
 80004e6:	10a4      	asrs	r4, r4, #2
 80004e8:	2600      	movs	r6, #0
 80004ea:	42a6      	cmp	r6, r4
 80004ec:	d105      	bne.n	80004fa <__libc_init_array+0x2e>
 80004ee:	bd70      	pop	{r4, r5, r6, pc}
 80004f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80004f4:	4798      	blx	r3
 80004f6:	3601      	adds	r6, #1
 80004f8:	e7ee      	b.n	80004d8 <__libc_init_array+0xc>
 80004fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80004fe:	4798      	blx	r3
 8000500:	3601      	adds	r6, #1
 8000502:	e7f2      	b.n	80004ea <__libc_init_array+0x1e>
 8000504:	080006a0 	.word	0x080006a0
 8000508:	080006a0 	.word	0x080006a0
 800050c:	080006a0 	.word	0x080006a0
 8000510:	080006a4 	.word	0x080006a4

08000514 <malloc>:
 8000514:	4b02      	ldr	r3, [pc, #8]	; (8000520 <malloc+0xc>)
 8000516:	4601      	mov	r1, r0
 8000518:	6818      	ldr	r0, [r3, #0]
 800051a:	f000 b823 	b.w	8000564 <_malloc_r>
 800051e:	bf00      	nop
 8000520:	20000000 	.word	0x20000000

08000524 <sbrk_aligned>:
 8000524:	b570      	push	{r4, r5, r6, lr}
 8000526:	4e0e      	ldr	r6, [pc, #56]	; (8000560 <sbrk_aligned+0x3c>)
 8000528:	460c      	mov	r4, r1
 800052a:	6831      	ldr	r1, [r6, #0]
 800052c:	4605      	mov	r5, r0
 800052e:	b911      	cbnz	r1, 8000536 <sbrk_aligned+0x12>
 8000530:	f000 f88c 	bl	800064c <_sbrk_r>
 8000534:	6030      	str	r0, [r6, #0]
 8000536:	4621      	mov	r1, r4
 8000538:	4628      	mov	r0, r5
 800053a:	f000 f887 	bl	800064c <_sbrk_r>
 800053e:	1c43      	adds	r3, r0, #1
 8000540:	d00a      	beq.n	8000558 <sbrk_aligned+0x34>
 8000542:	1cc4      	adds	r4, r0, #3
 8000544:	f024 0403 	bic.w	r4, r4, #3
 8000548:	42a0      	cmp	r0, r4
 800054a:	d007      	beq.n	800055c <sbrk_aligned+0x38>
 800054c:	1a21      	subs	r1, r4, r0
 800054e:	4628      	mov	r0, r5
 8000550:	f000 f87c 	bl	800064c <_sbrk_r>
 8000554:	3001      	adds	r0, #1
 8000556:	d101      	bne.n	800055c <sbrk_aligned+0x38>
 8000558:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800055c:	4620      	mov	r0, r4
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	20000088 	.word	0x20000088

08000564 <_malloc_r>:
 8000564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000568:	1ccd      	adds	r5, r1, #3
 800056a:	f025 0503 	bic.w	r5, r5, #3
 800056e:	3508      	adds	r5, #8
 8000570:	2d0c      	cmp	r5, #12
 8000572:	bf38      	it	cc
 8000574:	250c      	movcc	r5, #12
 8000576:	2d00      	cmp	r5, #0
 8000578:	4607      	mov	r7, r0
 800057a:	db01      	blt.n	8000580 <_malloc_r+0x1c>
 800057c:	42a9      	cmp	r1, r5
 800057e:	d905      	bls.n	800058c <_malloc_r+0x28>
 8000580:	230c      	movs	r3, #12
 8000582:	603b      	str	r3, [r7, #0]
 8000584:	2600      	movs	r6, #0
 8000586:	4630      	mov	r0, r6
 8000588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800058c:	4e2e      	ldr	r6, [pc, #184]	; (8000648 <_malloc_r+0xe4>)
 800058e:	f000 f86d 	bl	800066c <__malloc_lock>
 8000592:	6833      	ldr	r3, [r6, #0]
 8000594:	461c      	mov	r4, r3
 8000596:	bb34      	cbnz	r4, 80005e6 <_malloc_r+0x82>
 8000598:	4629      	mov	r1, r5
 800059a:	4638      	mov	r0, r7
 800059c:	f7ff ffc2 	bl	8000524 <sbrk_aligned>
 80005a0:	1c43      	adds	r3, r0, #1
 80005a2:	4604      	mov	r4, r0
 80005a4:	d14d      	bne.n	8000642 <_malloc_r+0xde>
 80005a6:	6834      	ldr	r4, [r6, #0]
 80005a8:	4626      	mov	r6, r4
 80005aa:	2e00      	cmp	r6, #0
 80005ac:	d140      	bne.n	8000630 <_malloc_r+0xcc>
 80005ae:	6823      	ldr	r3, [r4, #0]
 80005b0:	4631      	mov	r1, r6
 80005b2:	4638      	mov	r0, r7
 80005b4:	eb04 0803 	add.w	r8, r4, r3
 80005b8:	f000 f848 	bl	800064c <_sbrk_r>
 80005bc:	4580      	cmp	r8, r0
 80005be:	d13a      	bne.n	8000636 <_malloc_r+0xd2>
 80005c0:	6821      	ldr	r1, [r4, #0]
 80005c2:	3503      	adds	r5, #3
 80005c4:	1a6d      	subs	r5, r5, r1
 80005c6:	f025 0503 	bic.w	r5, r5, #3
 80005ca:	3508      	adds	r5, #8
 80005cc:	2d0c      	cmp	r5, #12
 80005ce:	bf38      	it	cc
 80005d0:	250c      	movcc	r5, #12
 80005d2:	4629      	mov	r1, r5
 80005d4:	4638      	mov	r0, r7
 80005d6:	f7ff ffa5 	bl	8000524 <sbrk_aligned>
 80005da:	3001      	adds	r0, #1
 80005dc:	d02b      	beq.n	8000636 <_malloc_r+0xd2>
 80005de:	6823      	ldr	r3, [r4, #0]
 80005e0:	442b      	add	r3, r5
 80005e2:	6023      	str	r3, [r4, #0]
 80005e4:	e00e      	b.n	8000604 <_malloc_r+0xa0>
 80005e6:	6822      	ldr	r2, [r4, #0]
 80005e8:	1b52      	subs	r2, r2, r5
 80005ea:	d41e      	bmi.n	800062a <_malloc_r+0xc6>
 80005ec:	2a0b      	cmp	r2, #11
 80005ee:	d916      	bls.n	800061e <_malloc_r+0xba>
 80005f0:	1961      	adds	r1, r4, r5
 80005f2:	42a3      	cmp	r3, r4
 80005f4:	6025      	str	r5, [r4, #0]
 80005f6:	bf18      	it	ne
 80005f8:	6059      	strne	r1, [r3, #4]
 80005fa:	6863      	ldr	r3, [r4, #4]
 80005fc:	bf08      	it	eq
 80005fe:	6031      	streq	r1, [r6, #0]
 8000600:	5162      	str	r2, [r4, r5]
 8000602:	604b      	str	r3, [r1, #4]
 8000604:	4638      	mov	r0, r7
 8000606:	f104 060b 	add.w	r6, r4, #11
 800060a:	f000 f835 	bl	8000678 <__malloc_unlock>
 800060e:	f026 0607 	bic.w	r6, r6, #7
 8000612:	1d23      	adds	r3, r4, #4
 8000614:	1af2      	subs	r2, r6, r3
 8000616:	d0b6      	beq.n	8000586 <_malloc_r+0x22>
 8000618:	1b9b      	subs	r3, r3, r6
 800061a:	50a3      	str	r3, [r4, r2]
 800061c:	e7b3      	b.n	8000586 <_malloc_r+0x22>
 800061e:	6862      	ldr	r2, [r4, #4]
 8000620:	42a3      	cmp	r3, r4
 8000622:	bf0c      	ite	eq
 8000624:	6032      	streq	r2, [r6, #0]
 8000626:	605a      	strne	r2, [r3, #4]
 8000628:	e7ec      	b.n	8000604 <_malloc_r+0xa0>
 800062a:	4623      	mov	r3, r4
 800062c:	6864      	ldr	r4, [r4, #4]
 800062e:	e7b2      	b.n	8000596 <_malloc_r+0x32>
 8000630:	4634      	mov	r4, r6
 8000632:	6876      	ldr	r6, [r6, #4]
 8000634:	e7b9      	b.n	80005aa <_malloc_r+0x46>
 8000636:	230c      	movs	r3, #12
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	4638      	mov	r0, r7
 800063c:	f000 f81c 	bl	8000678 <__malloc_unlock>
 8000640:	e7a1      	b.n	8000586 <_malloc_r+0x22>
 8000642:	6025      	str	r5, [r4, #0]
 8000644:	e7de      	b.n	8000604 <_malloc_r+0xa0>
 8000646:	bf00      	nop
 8000648:	20000084 	.word	0x20000084

0800064c <_sbrk_r>:
 800064c:	b538      	push	{r3, r4, r5, lr}
 800064e:	4d06      	ldr	r5, [pc, #24]	; (8000668 <_sbrk_r+0x1c>)
 8000650:	2300      	movs	r3, #0
 8000652:	4604      	mov	r4, r0
 8000654:	4608      	mov	r0, r1
 8000656:	602b      	str	r3, [r5, #0]
 8000658:	f7ff fed2 	bl	8000400 <_sbrk>
 800065c:	1c43      	adds	r3, r0, #1
 800065e:	d102      	bne.n	8000666 <_sbrk_r+0x1a>
 8000660:	682b      	ldr	r3, [r5, #0]
 8000662:	b103      	cbz	r3, 8000666 <_sbrk_r+0x1a>
 8000664:	6023      	str	r3, [r4, #0]
 8000666:	bd38      	pop	{r3, r4, r5, pc}
 8000668:	2000008c 	.word	0x2000008c

0800066c <__malloc_lock>:
 800066c:	4801      	ldr	r0, [pc, #4]	; (8000674 <__malloc_lock+0x8>)
 800066e:	f000 b809 	b.w	8000684 <__retarget_lock_acquire_recursive>
 8000672:	bf00      	nop
 8000674:	20000090 	.word	0x20000090

08000678 <__malloc_unlock>:
 8000678:	4801      	ldr	r0, [pc, #4]	; (8000680 <__malloc_unlock+0x8>)
 800067a:	f000 b804 	b.w	8000686 <__retarget_lock_release_recursive>
 800067e:	bf00      	nop
 8000680:	20000090 	.word	0x20000090

08000684 <__retarget_lock_acquire_recursive>:
 8000684:	4770      	bx	lr

08000686 <__retarget_lock_release_recursive>:
 8000686:	4770      	bx	lr

08000688 <_init>:
 8000688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800068a:	bf00      	nop
 800068c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800068e:	bc08      	pop	{r3}
 8000690:	469e      	mov	lr, r3
 8000692:	4770      	bx	lr

08000694 <_fini>:
 8000694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000696:	bf00      	nop
 8000698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800069a:	bc08      	pop	{r3}
 800069c:	469e      	mov	lr, r3
 800069e:	4770      	bx	lr
